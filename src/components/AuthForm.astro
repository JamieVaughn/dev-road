---
interface Props {
  action: string
  title: string;
  reset?: boolean;
}
const { action, title, reset } = Astro.props

const x = Math.ceil(Math.random() * 10)
const y = Math.ceil(Math.random() * (11 - x))
const op = ['+', '-', '*'][Math.floor(Math.random() * 3)]
const value = () => ({
  '+': x + y,
  '-': x - y,
  '*': x * y
})[op]
const pattern = `^${value()}$`
---

<article>
  <div>
    <hgroup>
      <h1>{title}</h1>
      <span>to access to the course content.</span>
    </hgroup>
    <slot />
    <form action={action} method="POST">
      <label for="email">Email</label>
      <input
        type="text"
        name="email"
        id="email"
        placeholder="Email"
        aria-label="Email"
        autocomplete="email"
        required
        pattern="[^@\s]+@[^@\s]+\.[^@\s]+"
      />
      <label for="password">Password</label>
      <input
        type="password"
        id="password"
        name="password"
        placeholder="Password"
        aria-label="Password"
        autocomplete="current-password"
        required
      />
      <button type="submit" class="contrast">{title}</button>
      {title === 'Sign up' && (
        <div class="puzzle">
          <label for="puzzle">{`${x} ${op} ${y} is`}</label>
          <input
            type="text"
            id="puzzle"
            name="puzzle"
            placeholder="Confirm Puzzle"
            aria-label="Confirm Puzzle"
            required
            pattern={pattern}
          />
        </div>
      )}
    </form>
    {reset && <a href="/reset">Reset Password</a>}
  </div>
</article>

<style>
  hgroup {
    display: flex;
    align-items: baseline;
    gap: 1em;
  }
  hgroup h1 {
    white-space: nowrap;
  }
  article {
    margin: 0 auto;
  }
  @media (min-width: 800px) {
    article {
      min-width: 600px;
      width: 50vw;
    }
  }
  a[href="/reset"] {
    margin-top: 1em;
    text-align: center;
    display: block;
  }
  #email:user-valid, #password:user-valid, #puzzle:user-valid {
    outline: 3px solid rgb(119, 218, 161, 0.5);
  }
  #email:user-invalid, #password:user-invalid, #puzzle:user-invalid {
    outline: 3px solid crimson;
  }
  label:has(+ input:user-valid):after {
    display: inline-block;
    padding-left: 0.5em;
    content: '✓';
    color: rgb(119, 218, 161);
  }
  label:has(+ input:user-invalid):after {
    display: inline-block;
    padding-left: 0.5em;
    content: '⨯';
    color: crimson;
  }
  .puzzle label {
    white-space: nowrap;
    flex-grow: 2;
    margin-top: 10px;
  }
  .puzzle {
    display: flex;
    gap: 1em;
  }
</style>